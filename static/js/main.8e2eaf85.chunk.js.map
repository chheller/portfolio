{"version":3,"sources":["Nav/NavBar.tsx","Home/BackgroundSplash.tsx","Common/Typography.tsx","Home/Home.tsx","Nav/NavItem.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["NavBar","children","className","BackgroundSplash","href","target","rel","title","xmlns","viewBox","d","Text","props","alt","bold","caps","center","color","size","tag","Tag","restProps","sx","fontFamily","fontSize","fontWeight","textAlign","textTransform","margin","style","Header","HomePage","NavItem","linkTo","text","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAMaA,G,WAAoB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClC,OAAO,wBAAIC,UAAW,UAAWD,KCJtBE,G,MAAuB,WAClC,OACE,yBAAKD,UAAU,cACb,uBACEA,UAAU,UACVE,KAAK,kHACLC,OAAO,SACPC,IAAI,sBACJC,MAAM,gFAEN,0BAAML,UAAU,cACd,yBAAKM,MAAM,6BAA6BC,QAAQ,aAC9C,gDACA,0BAAMC,EAAE,mDAGZ,0BAAMR,UAAU,cAAhB,qB,OCPKS,EAAsB,SAAAC,GAAU,IAEzCC,EASED,EATFC,IACAC,EAQEF,EARFE,KACAC,EAOEH,EAPFG,KACAC,EAMEJ,EANFI,OACAf,EAKEW,EALFX,SACAgB,EAIEL,EAJFK,MAPwC,EAWtCL,EAHFM,YARwC,MAQjC,GARiC,IAWtCN,EAFFO,IAAKC,OATmC,MAS7B,OAT6B,EAUrCC,EAVqC,YAWtCT,EAXsC,gEAapCU,EAAoB,CACxBC,WAAaV,EAA2B,WAArB,mBACnBW,SAAUN,EACVO,WAAYX,EAAO,OAAS,SAC5BY,UAAWV,EAAS,SAAW,OAC/BW,cAAeZ,EAAO,YAAc,OACpCa,OAAQ,EACRX,SAEF,OAEE,kBAACG,EAAD,iBAASC,EAAT,CAAoBQ,MAAOP,IACxBrB,IAKM6B,EAAwB,SAAAlB,GAAK,OAAI,kBAAC,EAAD,eAAMO,IAAI,KAAKD,KAAM,IAAQN,KCrC9DmB,G,MAAe,WAC1B,OACE,6BACE,yBAAK7B,UAAU,aACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAQY,MAAI,EAACI,KAAM,IAAnB,kBAGA,kBAAC,EAAD,CAAMF,QAAM,EAACE,KAAM,IAAnB,6CAKJ,kBAAC,EAAD,SCZOc,G,MAAqB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,OAAkBC,EAAW,EAArBjC,SAC3C,OACE,4BACE,uBAAGG,KAAM6B,EAAQ5B,OAAO,UACrB6B,MCEWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBCAO,WACrB,OACE,6BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAASR,OAAQ,+BACf,kBAAC,EAAD,CAAQf,KAAM,GAAID,MAAM,SAAxB,WAIF,kBAAC,EAAD,CACEgB,OACE,oHAGF,kBAAC,EAAD,CAAQf,KAAM,GAAID,MAAM,SAAxB,cAKJ,kBAAC,EAAD,QDnBU,MAASyB,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8e2eaf85.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport './NavBar.css';\ninterface Props {\n  children: JSX.Element[];\n}\n\nexport const NavBar: FC<Props> = ({ children }) => {\n  return <ul className={'navBar'}>{children}</ul>;\n};\n","import React, { FC } from 'react';\nimport './BackgroundSplash.css';\n\nexport const BackgroundSplash: FC = () => {\n  return (\n    <div className=\"background\">\n      <a\n        className=\"credits\"\n        href=\"https://unsplash.com/@jesuskiteque?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        title=\"Download free do whatever you want high-resolution photos from Jesus Kiteque\"\n      >\n        <span className=\"svgWrapper\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\n            <title>unsplash-logo</title>\n            <path d=\"M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z\"></path>\n          </svg>\n        </span>\n        <span className=\"creditName\">Jesus Kiteque</span>\n      </a>\n    </div>\n  );\n};\n","import React, { FC, CSSProperties, ReactText } from 'react';\nimport { StandardLonghandProperties } from 'csstype';\n\ninterface TextProps {\n  alt?: boolean;\n  size?: number;\n  tag?: string;\n  center?: boolean;\n  bold?: boolean;\n  caps?: boolean;\n  color?: string;\n}\nexport const Text: FC<TextProps> = props => {\n  const {\n    alt,\n    bold,\n    caps,\n    center,\n    children,\n    color,\n    size = 16,\n    tag: Tag = 'span',\n    ...restProps\n  } = props;\n\n  const sx: CSSProperties = {\n    fontFamily: !alt ? 'Fairplay Display' : 'Segoe UI',\n    fontSize: size,\n    fontWeight: bold ? 'bold' : 'normal',\n    textAlign: center ? 'center' : 'left',\n    textTransform: caps ? 'uppercase' : 'none',\n    margin: 0,\n    color\n  };\n  return (\n    // @ts-ignore https://github.com/Microsoft/TypeScript/issues/28892\n    <Tag {...restProps} style={sx}>\n      {children}\n    </Tag>\n  );\n};\n\nexport const Header: FC<TextProps> = props => <Text tag=\"h1\" size={32} {...props}></Text>;\n","import React, { FC } from 'react';\nimport { BackgroundSplash } from './BackgroundSplash';\nimport { Text, Header } from '../Common/Typography';\nimport './Home.css';\n\nexport const HomePage: FC = () => {\n  return (\n    <div>\n      <div className=\"container\">\n        <div className=\"hero\">\n          <Header bold size={72}>\n            Charles Heller\n          </Header>\n          <Text center size={28}>\n            Developer * Cat Dad * Coffee Enthusiast\n          </Text>\n        </div>\n      </div>\n      <BackgroundSplash></BackgroundSplash>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport './NavItem.css';\ninterface Props {\n  linkTo: string;\n  children: JSX.Element;\n}\nexport const NavItem: FC<Props> = ({ linkTo, children: text }) => {\n  return (\n    <li>\n      <a href={linkTo} target=\"_blank\">\n        {text}\n      </a>\n    </li>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { FC } from 'react';\nimport { NavBar } from './Nav/NavBar';\nimport { HomePage } from './Home/Home';\nimport { NavItem } from './Nav/NavItem';\nimport { Header } from './Common/Typography';\n\nexport const App: FC = () => {\n  return (\n    <div>\n      <NavBar>\n        <NavItem linkTo={'https://github.com/chheller'}>\n          <Header size={18} color=\"white\">\n            Github\n          </Header>\n        </NavItem>\n        <NavItem\n          linkTo={\n            'https://www.linkedin.com/in/charles-heller-055677113?trk=people-guest_profile-result-card_result-card_full-click'\n          }\n        >\n          <Header size={18} color=\"white\">\n            LinkedIn\n          </Header>\n        </NavItem>\n      </NavBar>\n      <HomePage></HomePage>\n    </div>\n  );\n};\n"],"sourceRoot":""}